install.packages("tidyverse")
install.packages("remotes")
remotes::install_github("https://github.com/tylermorganwall/rayrender")
remotes::install_github("https://github.com/tylermorganwall/rayshader")
remotes::install_github("https://github.com/tylermorganwall/rayrender")
remotes::install_github("https://github.com/tylermorganwall/rayshader")
url <- 'https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_VN_20220630.gpkg'
destination_file <- 'kontur_population_VN_20220630.gpkg'
download.file(url, destination_file, 'curl')
library(sf)
library(R.utils)
df_pop_st <- st_read(gunzip(destination_file, remove=FALSE, skip=TRUE))
url <- 'https://geodata-eu-central-1-kontur-public.s3.amazonaws.com/kontur_datasets/kontur_population_VN_20220630.gpkg'
destination_file <- 'kontur_population_VN_20220630.gpkg'
download.file(url, destination_file, 'curl')
df_pop_st <- st_read(gunzip(destination_file, remove=FALSE, skip=TRUE))
install.packages("countrycode")
## load packages
required_packages <- c("optparse", "dplyr","lubridate","tidyr",
"readr","ape","seqinr","countrycode")
suppressMessages(
for (package in required_packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org")
}
library(package, character.only = TRUE)
}
)
# Define and parse command-line options
opt_parser <- OptionParser(
option_list = list(
make_option(c("-m", "--metadata"), type="character", help="Input tsv file containing metadata from GenBank, with sequence identifiers matching those in the input fasta file."),
make_option(c("-f", "--fasta"), type="character", help="Input fasta file, with sequence identifiers matching those in the metadata file."),
make_option(c("-c", "--country"), type="character", help="Country(ies) of Interest, the first country specified will determine local region"),
make_option(c("-n", "--number_sequences"), type="character", help="Number of desired sequences (defult is 1:1 ratio with number of sequences from desired country(ies))")
)
)
opt = parse_args(opt_parser)
opt
# Define and parse command-line options
opt_parser <- OptionParser(
option_list = list(
make_option(c("-m", "--metadata"), type="character", help="Input tsv file containing metadata from GenBank, with sequence identifiers matching those in the input fasta file."),
make_option(c("-f", "--fasta"), type="character", help="Input fasta file, with sequence identifiers matching those in the metadata file."),
make_option(c("-c", "--country"), type="character", help="Country(ies) of Interest, the first country specified will determine local region"),
make_option(c("-n", "--number_sequences"), type="numeric", help="Number of desired sequences (defult is 1:1 ratio with number of sequences from desired country(ies))")
)
)
opt = parse_args(opt_parser)
parse_args
opt
##########################################################
# Step 1: read in data
##########################################################
## read in input metadata file
if (!is.null(opt$metadata)) {
metadata.df <- read.csv("results/Dengue_1_infoTbl.csv")
} else {
cat("Input metadata file. Exiting now...")
quit()
}
## load packages
required_packages <- c("optparse", "dplyr","lubridate","tidyr",
"readr","ape","seqinr","countrycode",
"ggplot2","purrr","zoo")
suppressMessages(
for (package in required_packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org")
}
library(package, character.only = TRUE)
}
)
# Define and parse command-line options
opt_parser <- OptionParser(
option_list = list(
make_option(c("-m", "--metadata"), type="character", help="Input tsv file containing metadata from GenBank, with sequence identifiers matching those in the input fasta file."),
make_option(c("-f", "--fasta"), type="character", help="Input fasta file, with sequence identifiers matching those in the metadata file."),
make_option(c("-c", "--country"), type="character", help="Country(ies) of Interest, the first country specified will determine local region"),
make_option(c("-n", "--number_sequences"), type="numeric", help="Number of desired sequences (defult is 1:1 ratio with number of sequences from desired country(ies))"),
make_option(c("-e", "--prop_rd"), type="numeric",default = 0.8, help="Set proportion desired for region of interest (defult is 0.8)"),
make_option(c("-w", "--prop_or"), type="numeric",default = 0.2, help="Set proprotion desired for outside region of interest (defult is 0.2)")
)
)
opt = parse_args(opt_parser)
##########################################################
# Step 1: read in data
##########################################################
## read in input metadata file
if (!is.null(opt$metadata)) {
metadata.df <- read.csv('/Users/rhysinward/Documents/Dengue_anaysis/snakemake_trial/results/Dengue_1_infoTbl.csv')
} else {
cat("Input metadata file. Exiting now...")
quit()
}
# List of required packages
required_packages <- c("optparse", "dplyr", "Biostrings")
options(repos = c(CRAN = "http://cran.us.r-project.org"))
# Function to check and install packages
suppressMessages(
for (package in required_packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org")
}
library(package, character.only = TRUE)
}
)
setwd("/Users/rhysinward/Documents/grapevne_modules/dengue_pipeline_github/results")
seqs_wg <- read.fasta("Dengue_4_WG.fasta")
# List of required packages
required_packages <- c("optparse", "dplyr","lubridate","tidyr",
"readr","ape","seqinr","countrycode",
"ggplot2","purrr","zoo","rlang","wrswoR")
options(repos = c(CRAN = "http://cran.us.r-project.org"))
# Function to check and install packages
suppressMessages(
for (package in required_packages) {
if (!require(package, character.only = TRUE)) {
install.packages(package, repos = "http://cran.us.r-project.org")
}
library(package, character.only = TRUE)
}
)
opt_parser <- OptionParser(
option_list = list(
make_option(c("-f", "--fasta_WG"), type="character", help="Input WG fasta file, with sequence identifiers matching those in the metadata file."),
make_option(c("-g", "--fasta_EG"), type="character", help="Input WG fasta file, with sequence identifiers matching those in the metadata file."),
make_option(c("-o", "--outfile"), type="character", default="subsampled", help="Base name for output files. Files will be named as '<outfile>_'serotype'.fasta', '<outfile>__'serotype'_infoTbl.tsv', and '<outfile>__'serotype'_infoTbl.csv'")
)
)
opt = parse_args(opt_parser)
seqs_wg <- read.fasta("Dengue_4_WG.fasta")
seqs_eg <- read.fasta("Dengue_4_EG.fasta")
seq_name_wg <- as.data.frame(as.matrix(attributes(seqs_wg)$names))
seq_name_eg <- as.data.frame(as.matrix(attributes(seqs_eg)$names))
seq_name_wg
seq_name_eg
ids_to_remove <- seq_name_wg %>%
filter(V1 %in% seq_name_eg$V1)
ids_to_remove
filtered_sequences <- seqs_eg[!names(seqs_eg) %in% ids_to_remove]
filtered_sequences
filtered_sequences <- seqs_eg[names(seqs_eg) %in% ids_to_remove]
filtered_sequences <- seqs_eg[!names(seqs_eg) %in% ids_to_remove]
ids_to_remove
ids_to_remove <- seq_name_wg %>%
filter(!V1 %in% seq_name_eg$V1)
filtered_sequences <- seqs_eg[!names(seqs_eg) %in% ids_to_remove]
ids_to_remove
ids_to_remove <- seq_name_wg %>%
filter(V1 %in% seq_name_eg$V1)
ids_to_remove
seqs_eg <- seqs_eg[-ids_to_remove,]
seqs_eg
seqs_eg <- seqs_eg[[-ids_to_remove,]]
seqs_eg
names
names(fasta_sequences)
filtered_sequences <- fasta_sequences[!names(fasta_sequences) %in% ids_to_remove]
